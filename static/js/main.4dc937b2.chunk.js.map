{"version":3,"sources":["components/MasterDetail/SingleMaster/SingleMaster.js","components/MasterDetail/SingleDetail/SingleDetail.js","components/MasterDetail/MasterDetail.js","App.js","serviceWorker.js","index.js"],"names":["SingleMaster","title","handleDetail","id","level","body","className","onClick","SingleDetail","url_action","url_explanation","target","href","rel","MasterDetail","articles","useState","selectedArticle","setSelectedArticle","sortedArticles","setSortedArticles","sorted","setSorted","activeId","map","article","getArticlesByLevel","filter","handleSort","newArray","concat","sortArticles","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qx2BAceA,EAZM,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACtD,OACE,yBAAKC,UAAU,SAASC,QAAS,kBAAML,EAAaC,KAClD,yBAAKG,UAAU,UACb,0BAAMA,UAAS,sBAAiBF,KAChC,wBAAIE,UAAU,SAASL,IAEzB,uBAAGK,UAAU,QAAQD,KC0BZG,EAjCM,SAAC,GAAyD,IAAvDP,EAAsD,EAAtDA,MAAOI,EAA+C,EAA/CA,KAAMD,EAAyC,EAAzCA,MAAOK,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,gBACtD,OACE,yBAAKJ,UAAU,UACb,yBAAKA,UAAU,UACb,0BAAMA,UAAS,sBAAiBF,KAChC,wBAAIE,UAAU,SAASL,IAEzB,yBAAKK,UAAU,QACb,2BAAID,GACJ,yBAAKC,UAAU,kBACb,wBAAIA,UAAU,SAAd,gBACA,uBACEA,UAAU,OACVK,OAAO,SACPC,KAAMH,EAAW,GAAX,IACNI,IAAI,uBAEHJ,EAAW,GAAX,OAEH,uBACEH,UAAU,OACVK,OAAO,SACPC,KAAMF,EAAgB,GAAhB,IACNG,IAAI,uBAEHH,EAAgB,GAAhB,WCwEEI,EA/FM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACSC,mBAASD,EAAS,IAD3B,mBAC9BE,EAD8B,KACbC,EADa,OAEOF,mBAAS,IAFhB,mBAE9BG,EAF8B,KAEdC,EAFc,OAGTJ,oBAAS,GAHA,mBAG9BK,EAH8B,KAGtBC,EAHsB,KAqB/BpB,EAAe,SAACqB,GACpBR,EAASS,KAAI,SAACC,GAEZ,OADeA,EAAPtB,KACGoB,IACTL,EAAmBO,IACZ,OAaPC,EAAqB,SAACtB,GAK1B,OAJeW,EAASY,QAAO,SAACF,GAE9B,OAAOA,EAAO,OAAarB,MAKzBwB,EAAa,YAfE,WACnB,IAAIC,EAAWH,EAAmB,GAElCG,GADAA,EAAWA,EAASC,OAAOJ,EAAmB,KAC1BI,OAAOJ,EAAmB,IAC9CN,EAAkBS,GAYlBE,GAEET,GADED,IAoBN,OACE,yBAAKf,UAAU,aACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,oBACb,4BAAQA,UAAU,UAAUC,QAAS,kBAAMqB,MAA3C,mBAGA,4BAAQtB,UAAU,aAAaC,QAAS,kBAnB9Ca,EAAkBM,EAAmB,SACrCJ,GAAU,KAkBJ,OAGA,4BAAQhB,UAAU,gBAAgBC,QAAS,kBAlBjDa,EAAkBM,EAAmB,SACrCJ,GAAU,KAiBJ,UAGA,4BAAQhB,UAAU,eAAeC,QAAS,kBAjBhDa,EAAkBM,EAAmB,SACrCJ,GAAU,KAgBJ,UA5EFD,EACKF,EAAeK,KAAI,SAACC,GAAa,IAC9BtB,EAAOsB,EAAPtB,GACR,OACE,kBAAC,EAAD,eAAcD,aAAcA,EAAc8B,IAAK7B,GAAQsB,OAKtDV,EAASS,KAAI,SAACC,GAAa,IACxBtB,EAAOsB,EAAPtB,GACR,OAAO,kBAAC,EAAD,eAAcD,aAAcA,EAAc8B,IAAK7B,GAAQsB,QAuE9D,yBAAKnB,UAAU,oBACb,kBAAC,EAAiBW,M,MC/EXgB,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,CAAcS,SAAUA,MCGVmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4dc937b2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SingleMaster = ({ title, handleDetail, id, level, body }) => {\r\n  return (\r\n    <div className=\"master\" onClick={() => handleDetail(id)}>\r\n      <div className=\"header\">\r\n        <span className={`level color-${level}`}></span>\r\n        <h1 className=\"title\">{title}</h1>\r\n      </div>\r\n      <p className=\"body\">{body}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleMaster;\r\n","import React from \"react\";\r\n\r\nconst SingleDetail = ({ title, body, level, url_action, url_explanation }) => {\r\n  return (\r\n    <div className=\"detail\">\r\n      <div className=\"header\">\r\n        <span className={`level color-${level}`}></span>\r\n        <h1 className=\"title\">{title}</h1>\r\n      </div>\r\n      <div className=\"body\">\r\n        <p>{body}</p>\r\n        <div className=\"link-container\">\r\n          <h1 className=\"title\">weiterlesen:</h1>\r\n          <a\r\n            className=\"link\"\r\n            target=\"_blank\"\r\n            href={url_action[0][\"url\"]}\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {url_action[0][\"title\"]}\r\n          </a>\r\n          <a\r\n            className=\"link\"\r\n            target=\"_blank\"\r\n            href={url_explanation[0][\"url\"]}\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {url_explanation[0][\"title\"]}\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleDetail;\r\n","import React, { useState } from \"react\";\r\nimport SingleMaster from \"./SingleMaster/SingleMaster\";\r\nimport SingleDetail from \"./SingleDetail/SingleDetail\";\r\n\r\nconst MasterDetail = ({ articles }) => {\r\n  const [selectedArticle, setSelectedArticle] = useState(articles[0]);\r\n  const [sortedArticles, setSortedArticles] = useState([]);\r\n  const [sorted, setSorted] = useState(false);\r\n\r\n  const createList = () => {\r\n    if (sorted) {\r\n      return sortedArticles.map((article) => {\r\n        const { id } = article;\r\n        return (\r\n          <SingleMaster handleDetail={handleDetail} key={id} {...article} />\r\n        );\r\n      });\r\n    }\r\n\r\n    return articles.map((article) => {\r\n      const { id } = article;\r\n      return <SingleMaster handleDetail={handleDetail} key={id} {...article} />;\r\n    });\r\n  };\r\n\r\n  const handleDetail = (activeId) => {\r\n    articles.map((article) => {\r\n      const { id } = article;\r\n      if (id === activeId) {\r\n        setSelectedArticle(article);\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n  };\r\n\r\n  const sortArticles = () => {\r\n    let newArray = getArticlesByLevel(2);\r\n    newArray = newArray.concat(getArticlesByLevel(1));\r\n    newArray = newArray.concat(getArticlesByLevel(0));\r\n    setSortedArticles(newArray);\r\n  };\r\n\r\n  const getArticlesByLevel = (level) => {\r\n    let newArray = articles.filter((article) => {\r\n      //eslint-disable-next-line\r\n      return article[\"level\"] == level;\r\n    });\r\n    return newArray;\r\n  };\r\n\r\n  const handleSort = () => {\r\n    sortArticles();\r\n    if (sorted) {\r\n      setSorted(false);\r\n    } else {\r\n      setSorted(true);\r\n    }\r\n  };\r\n\r\n  const handleRed = () => {\r\n    setSortedArticles(getArticlesByLevel(2));\r\n    setSorted(true);\r\n  };\r\n  const handleYellow = () => {\r\n    setSortedArticles(getArticlesByLevel(1));\r\n    setSorted(true);\r\n  };\r\n  const handleGreen = () => {\r\n    setSortedArticles(getArticlesByLevel(0));\r\n    setSorted(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"master-container\">\r\n        <div className=\"button-container\">\r\n          <button className=\"primary\" onClick={() => handleSort()}>\r\n            Sort Importance\r\n          </button>\r\n          <button className=\"button-red\" onClick={() => handleRed()}>\r\n            RED\r\n          </button>\r\n          <button className=\"button-yellow\" onClick={() => handleYellow()}>\r\n            YELLOW\r\n          </button>\r\n          <button className=\"button-green\" onClick={() => handleGreen()}>\r\n            GREEN\r\n          </button>\r\n        </div>\r\n        {createList()}\r\n      </div>\r\n      <div className=\"detail-container\">\r\n        <SingleDetail {...selectedArticle} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MasterDetail;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport articles from \"./articles.json\";\nimport MasterDetail from \"./components/MasterDetail/MasterDetail\";\nimport \"./assets/scss/main.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MasterDetail articles={articles} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}